@use "sass:math";

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3,
);

$grid-columns: 12;
$grid-gutter-width: 30px !default;

%gutter-padding{
  padding-left: calc(var(--grid-gutter-x) * 0.5);
  padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid{
  --grid-gutter-x: #{$grid-gutter-width};
  --grid-gutter-y: 0;

  width: 100%;
  margin-left: auto;
  margin-right: auto;
  @extend %gutter-padding;
}

.container{
  @extend .container-fluid;
}

.row{
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--grid-gutter-y) * -1);
  margin-left: calc(var(--grid-gutter-x) * -1 * 0.5);
  margin-right: calc(var(--grid-gutter-x) * -1 * 0.5);
  
  > *{
    margin-top: var(--grid-gutter-y);
    @extend %gutter-padding;
  }
}

.col{
  flex: 1 0 auto;
}

@mixin makeContainer($width, $bypass: false){
  @if $bypass == true{
    @content;
  } @else {
    @media screen and (min-width: $width){
      @content;
    }
  }
}

@mixin makeRowCols($infix){
  @for $i from 1 through $grid-columns * 0.5{
    .row-cols#{$infix}-#{$i} > *{
      flex: 0 0 auto;
      width: math.div(100%, $i);
    }
  }
}

@mixin makeCols($infix){
  @for $i from 1 through $grid-columns{
    .col#{$infix}-#{$i}{
      flex: 0 0 auto;
      width: math.div(100%, $grid-columns) * $i;
    }
  }
}

@mixin makeOffsets($infix){
  @for $i from 0 to $grid-columns{
    .offset#{$infix}-#{$i}{
      margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
    }
  }
}

@mixin makeGutter($infix){
  @each $g, $val in $gutters{
    .g#{$infix}-#{$g},
    .gx#{$infix}-#{$g}{
      --grid-gutter-x: #{$grid-gutter-width * $val};
    }

    .g#{$infix}-#{$g},
    .gy#{$infix}-#{$g}{
      --grid-gutter-y: #{$grid-gutter-width * $val};
    }
  }
}

@each $break-point, $width in $grid-breakpoints{
  $max-width: map-get($container-max-widths, $break-point);
  $infix: if($break-point == "xs", "", -#{$break-point});
  $isXs: $break-point == xs;

  @include makeContainer($width, $isXs){
    .container{
      max-width: $max-width;
    }

    @include makeRowCols($infix);

    @include makeCols($infix);  

    @include makeOffsets($infix);

    @include makeGutter($infix);
   
  }  
}